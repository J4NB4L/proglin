#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemple complet d'utilisation des m√©thodes de programmation lin√©aire
Inclut: Simplexe Standard, Grand M, Dual, et syst√®me d'enregistrement
"""

import sys
import os
from enhanced_variables import interactive_problem_builder, VariableManager, enhanced_display_simplex_tableau
from tab_method import SimplexMethodTab
from grand_M_method import GrandMMethod
from dual_method import DualMethod
from colorama import init, Fore, Style

init()

class LinearProgrammingSolver:
    def __init__(self):
        self.variable_manager = VariableManager()
        self.current_problem = None
        self.current_method = None
    
    def main_menu(self):
        """Menu principal de l'application"""
        while True:
            print(f"\n{Fore.MAGENTA}{'='*80}")
            print("üî¨ SOLVEUR DE PROGRAMMATION LIN√âAIRE")
            print(f"{'='*80}{Style.RESET_ALL}")
            
            options = {
                "1": "üìù Cr√©er un nouveau probl√®me",
                "2": "üìÇ Charger un probl√®me existant", 
                "3": "üîç R√©soudre le probl√®me actuel",
                "4": "üîÑ Analyser Primal-Dual",
                "5": "üìä Historique des probl√®mes",
                "6": "üíæ Sauvegarder le probl√®me actuel",
                "7": "‚ùå Quitter"
            }
            
            for key, desc in options.items():
                print(f"  {key}. {desc}")
            
            if self.current_problem:
                method = self.current_problem.get("method_type", "Inconnu")
                vars_count = self.current_problem.get("nombres_variables_base", 0)
                constraints_count = self.current_problem.get("nb_equations", 0)
                print(f"\nüìå Probl√®me actuel: {method} ({vars_count} vars, {constraints_count} contraintes)")
            
            choice = input(f"\n{Fore.YELLOW}Votre choix: {Style.RESET_ALL}")
            
            if choice == "1":
                self.create_new_problem()
            elif choice == "2":
                self.load_problem()
            elif choice == "3":
                self.solve_current_problem()
            elif choice == "4":
                self.dual_analysis()
            elif choice == "5":
                self.show_history()
            elif choice == "6":
                self.save_current_problem()
            elif choice == "7":
                print("üëã Au revoir!")
                break
            else:
                print(f"{Fore.RED}‚ùå Choix invalide{Style.RESET_ALL}")
    
    def create_new_problem(self):
        """Cr√©e un nouveau probl√®me"""
        print(f"\n{Fore.CYAN}üìù CR√âATION D'UN NOUVEAU PROBL√àME{Style.RESET_ALL}")
        
        try:
            variables, method = interactive_problem_builder()
            if variables:
                self.current_problem = variables
                self.current_method = method
                
                # Sauvegarde automatique dans l'historique
                index = self.variable_manager.save_problem(variables, method)
                print(f"‚úÖ Probl√®me cr√©√© et sauvegard√© (index: {index})")
                
                # Affichage du probl√®me
                enhanced_display_simplex_tableau(variables, 0, method)
            else:
                print(f"{Fore.RED}‚ùå Cr√©ation annul√©e{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de la cr√©ation: {e}{Style.RESET_ALL}")
    
    def load_problem(self):
        """Charge un probl√®me existant"""
        print(f"\n{Fore.CYAN}üìÇ CHARGEMENT D'UN PROBL√àME{Style.RESET_ALL}")
        
        print("Options de chargement:")
        print("1. Depuis un fichier")
        print("2. Depuis l'historique")
        print("3. Exemples pr√©d√©finis")
        
        choice = input("Votre choix (1-3): ")
        
        if choice == "1":
            filename = input("Nom du fichier: ")
            variables = self.variable_manager.load_from_file(filename)
            if variables:
                self.current_problem = variables
                self.current_method = variables.get("method_type", "Charg√©")
                enhanced_display_simplex_tableau(variables, 0, self.current_method)
        
        elif choice == "2":
            self.variable_manager.list_history()
            if self.variable_manager.history:
                try:
                    index = int(input("Index du probl√®me √† charger: "))
                    variables = self.variable_manager.get_problem(index)
                    if variables:
                        self.current_problem = variables
                        self.current_method = self.variable_manager.history[index]["method"]
                        print(f"‚úÖ Probl√®me {index} charg√©")
                        enhanced_display_simplex_tableau(variables, 0, self.current_method)
                    else:
                        print(f"{Fore.RED}‚ùå Index invalide{Style.RESET_ALL}")
                except ValueError:
                    print(f"{Fore.RED}‚ùå Index invalide{Style.RESET_ALL}")
        
        elif choice == "3":
            self.load_predefined_examples()
        else:
            print(f"{Fore.RED}‚ùå Choix invalide{Style.RESET_ALL}")
    
    def load_predefined_examples(self):
        """Charge des exemples pr√©d√©finis"""
        examples = {
            "1": {
                "name": "Exemple Standard (3x‚ÇÅ + 5x‚ÇÇ)",
                "variables": {
                    "tab_optimisation": [0, 3, 5],
                    "nombres_variables_base": 2,
                    "equations": {
                        "equation_1": [4, 1, 0],
                        "equation_2": [12, 0, 2],
                        "equation_3": [18, 3, 2],
                    },
                    "nb_equations": 3,
                    "method_type": "Simplexe Standard"
                }
            },
            "2": {
                "name": "Exemple Grand M (avec contrainte d'√©galit√©)",
                "variables": {
                    "tab_optimisation": [0, 3, 5],
                    "nombres_variables_base": 2,
                    "equations": {
                        "equation_1": [4, 1, 0],
                        "equation_2": [12, 0, 2],
                        "equation_3": [18, 3, 2],
                    },
                    "nb_equations": 3,
                    "constraints_info": ["<=", "<=", "="],
                    "method_type": "Grand M"
                }
            },
            "3": {
                "name": "Probl√®me de minimisation",
                "variables": {
                    "tab_optimisation": [0, -7, -6, -5],  # Min devient Max avec -
                    "nombres_variables_base": 3,
                    "equations": {
                        "equation_1": [18, 3, 8, 6],
                        "equation_2": [15, 1, 2, 6],
                    },
                    "nb_equations": 2,
                    "constraints_info": ["=", "="],
                    "method_type": "Grand M",
                    "objective_type": "min"
                }
            }
        }
        
        print("\nExemples disponibles:")
        for key, example in examples.items():
            print(f"  {key}. {example['name']}")
        
        choice = input("Choisir un exemple (1-3): ")
        if choice in examples:
            self.current_problem = examples[choice]["variables"]
            self.current_method = examples[choice]["variables"]["method_type"]
            print(f"‚úÖ {examples[choice]['name']} charg√©")
            enhanced_display_simplex_tableau(self.current_problem, 0, self.current_method)
        else:
            print(f"{Fore.RED}‚ùå Exemple invalide{Style.RESET_ALL}")
    
    def solve_current_problem(self):
        """R√©sout le probl√®me actuel"""
        if not self.current_problem:
            print(f"{Fore.RED}‚ùå Aucun probl√®me √† r√©soudre. Cr√©ez ou chargez un probl√®me d'abord.{Style.RESET_ALL}")
            return
        
        print(f"\n{Fore.CYAN}üîç R√âSOLUTION DU PROBL√àME{Style.RESET_ALL}")
        
        # D√©terminer la m√©thode appropri√©e
        constraints_info = self.current_problem.get("constraints_info", [])
        has_equality = "=" in constraints_info
        has_greater_equal = ">=" in constraints_info
        
        print("M√©thodes de r√©solution disponibles:")
        methods = ["1. Simplexe Standard"]
        
        if has_equality or has_greater_equal:
            methods.extend(["2. Grand M", "3. Deux Phases (non impl√©ment√©)"])
        
        for method in methods:
            print(f"  {method}")
        
        # Suggestion automatique
        if has_equality or has_greater_equal:
            suggested = "2"
            print(f"\nüí° M√©thode sugg√©r√©e: Grand M (contraintes d'√©galit√© ou ‚â• d√©tect√©es)")
        else:
            suggested = "1"
            print(f"\nüí° M√©thode sugg√©r√©e: Simplexe Standard")
        
        choice = input(f"Votre choix [{suggested}]: ") or suggested
        
        try:
            if choice == "1":
                self.solve_with_standard_simplex()
            elif choice == "2":
                self.solve_with_grand_m()
            elif choice == "3":
                print(f"{Fore.YELLOW}‚ö†Ô∏è M√©thode des deux phases non encore impl√©ment√©e{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}‚ùå Choix invalide{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de la r√©solution: {e}{Style.RESET_ALL}")
    
    def solve_with_standard_simplex(self):
        """R√©sout avec la m√©thode du simplexe standard"""
        print(f"\n{Fore.GREEN}üöÄ R√©solution par Simplexe Standard{Style.RESET_ALL}")
        
        # Copie pour √©viter de modifier l'original
        import copy
        problem_copy = copy.deepcopy(self.current_problem)
        
        solver = SimplexMethodTab(problem_copy)
        solver.run()
    
    def solve_with_grand_m(self):
        """R√©sout avec la m√©thode du Grand M"""
        print(f"\n{Fore.GREEN}üöÄ R√©solution par Grand M{Style.RESET_ALL}")
        
        # Copie pour √©viter de modifier l'original
        import copy
        problem_copy = copy.deepcopy(self.current_problem)
        
        solver = GrandMMethod(problem_copy)
        solver.run()
    
    def dual_analysis(self):
        """Effectue une analyse primal-dual"""
        if not self.current_problem:
            print(f"{Fore.RED}‚ùå Aucun probl√®me pour l'analyse duale.{Style.RESET_ALL}")
            return
        
        print(f"\n{Fore.CYAN}üîÑ ANALYSE PRIMAL-DUAL{Style.RESET_ALL}")
        
        # V√©rifier si le probl√®me est compatible avec l'analyse duale
        constraints_info = self.current_problem.get("constraints_info", [])
        if any(c in [">=", "="] for c in constraints_info):
            print(f"{Fore.YELLOW}‚ö†Ô∏è Le probl√®me contient des contraintes ‚â• ou =.")
            print("L'analyse duale sera effectu√©e apr√®s conversion en forme standard.{Style.RESET_ALL}")
        
        try:
            import copy
            problem_copy = copy.deepcopy(self.current_problem)
            
            dual_analyzer = DualMethod(problem_copy)
            dual_analyzer.run_complete_analysis()
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de l'analyse duale: {e}{Style.RESET_ALL}")
    
    def show_history(self):
        """Affiche l'historique des probl√®mes"""
        print(f"\n{Fore.CYAN}üìä HISTORIQUE DES PROBL√àMES{Style.RESET_ALL}")
        self.variable_manager.list_history()
    
    def save_current_problem(self):
        """Sauvegarde le probl√®me actuel"""
        if not self.current_problem:
            print(f"{Fore.RED}‚ùå Aucun probl√®me √† sauvegarder.{Style.RESET_ALL}")
            return
        
        filename = input("Nom du fichier de sauvegarde: ")
        if filename:
            self.variable_manager.save_to_file({
                "timestamp": "Manual save",
                "method": self.current_method or "Inconnu",
                "variables": self.current_problem,
                "metadata": {
                    "nb_variables": self.current_problem.get("nombres_variables_base", 0),
                    "nb_contraintes": self.current_problem.get("nb_equations", 0),
                    "constraints_types": self.current_problem.get("constraints_info", [])
                }
            }, filename)

def demo_complete():
    """D√©monstration compl√®te des fonctionnalit√©s"""
    print(f"{Fore.MAGENTA}{'='*80}")
    print("üéØ D√âMONSTRATION COMPL√àTE DU SOLVEUR")
    print(f"{'='*80}{Style.RESET_ALL}")
    
    # Exemple 1: Probl√®me standard
    print(f"\n{Fore.CYAN}üìã EXEMPLE 1: Probl√®me Standard{Style.RESET_ALL}")
    variables_std = {
        "tab_optimisation": [0, 3, 5],
        "nombres_variables_base": 2,
        "equations": {
            "equation_1": [4, 1, 0],
            "equation_2": [12, 0, 2],
            "equation_3": [18, 3, 2],
        },
        "nb_equations": 3,
        "method_type": "Simplexe Standard"
    }
    
    print("Max Z = 3x‚ÇÅ + 5x‚ÇÇ")
    print("  x‚ÇÅ ‚â§ 4")
    print("  2x‚ÇÇ ‚â§ 12")  
    print("  3x‚ÇÅ + 2x‚ÇÇ ‚â§ 18")
    
    solver_std = SimplexMethodTab(variables_std)
    solver_std.run()
    
    # Exemple 2: Grand M
    print(f"\n{Fore.CYAN}üìã EXEMPLE 2: M√©thode du Grand M{Style.RESET_ALL}")
    variables_gm = {
        "tab_optimisation": [0, 3, 5],
        "nombres_variables_base": 2,
        "equations": {
            "equation_1": [4, 1, 0],
            "equation_2": [12, 0, 2],
            "equation_3": [18, 3, 2],
        },
        "nb_equations": 3,
        "constraints_info": ["<=", "<=", "="],
        "method_type": "Grand M"
    }
    
    print("Max Z = 3x‚ÇÅ + 5x‚ÇÇ")
    print("  x‚ÇÅ ‚â§ 4")
    print("  2x‚ÇÇ ‚â§ 12")
    print("  3x‚ÇÅ + 2x‚ÇÇ = 18")
    
    solver_gm = GrandMMethod(variables_gm)
    solver_gm.run()
    
    # Exemple 3: Analyse duale
    print(f"\n{Fore.CYAN}üìã EXEMPLE 3: Analyse Primal-Dual{Style.RESET_ALL}")
    dual_analyzer = DualMethod(variables_std)
    dual_analyzer.run_complete_analysis()

if __name__ == "__main__":
    print("Choisir le mode d'ex√©cution:")
    print("1. Interface interactive")
    print("2. D√©monstration compl√®te")
    
    choice = input("Votre choix (1-2): ")
    
    if choice == "1":
        app = LinearProgrammingSolver()
        app.main_menu()
    elif choice == "2":
        demo_complete()
    else:
        print("Choix invalide, lancement de l'interface interactive par d√©faut...")
        app = LinearProgrammingSolver()
        app.main_menu()