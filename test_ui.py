from tabulate import tabulate
from colorama import init, Fore, Style, Back
import os
import time
from typing import Dict, List, Tuple

# Initialiser colorama
init(autoreset=True)

class SimplexInterface:
    """Interface moderne pour la m√©thode du simplexe"""
    
    def __init__(self):
        self.clear_screen()
        self.show_welcome()
    
    def clear_screen(self):
        """Nettoie l'√©cran"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def show_welcome(self):
        """Affiche l'√©cran de bienvenue"""
        self.clear_screen()
        print(Fore.CYAN + "="*80)
        print(Fore.CYAN + " "*20 + "üéØ M√âTHODE DU SIMPLEXE üéØ")
        print(Fore.CYAN + "="*80)
        print(Fore.WHITE + "\n" + " "*15 + "Optimisation Lin√©aire Interactive")
        print(Fore.YELLOW + " "*20 + "Version 2.0 - Interface Am√©lior√©e\n")
        print(Fore.CYAN + "="*80)
        time.sleep(2)
    
    def show_menu(self):
        """Affiche le menu principal"""
        self.clear_screen()
        print(Fore.BLUE + "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print(Fore.BLUE + "‚ïë" + Fore.WHITE + "                  MENU PRINCIPAL                       " + Fore.BLUE + "‚ïë")
        print(Fore.BLUE + "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
        print(Fore.BLUE + "‚ïë" + Fore.GREEN + "  1. " + Fore.WHITE + "üìù Nouveau probl√®me                              " + Fore.BLUE + "‚ïë")
        print(Fore.BLUE + "‚ïë" + Fore.GREEN + "  2. " + Fore.WHITE + "üìä Charger un exemple                            " + Fore.BLUE + "‚ïë")
        print(Fore.BLUE + "‚ïë" + Fore.GREEN + "  3. " + Fore.WHITE + "üìö Aide et tutoriel                              " + Fore.BLUE + "‚ïë")
        print(Fore.BLUE + "‚ïë" + Fore.GREEN + "  4. " + Fore.WHITE + "üö™ Quitter                                       " + Fore.BLUE + "‚ïë")
        print(Fore.BLUE + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")
        
    def get_menu_choice(self):
        """Obtient le choix du menu"""
        while True:
            choice = input(Fore.YELLOW + "Votre choix (1-4): " + Fore.WHITE)
            if choice in ['1', '2', '3', '4']:
                return int(choice)
            print(Fore.RED + "‚ùå Choix invalide. Veuillez entrer un nombre entre 1 et 4.")
    
    def show_problem_type_menu(self):
        """Menu pour choisir le type de probl√®me"""
        print(Fore.CYAN + "\nüéØ Type de probl√®me:")
        print(Fore.WHITE + "  1. Maximisation")
        print(Fore.WHITE + "  2. Minimisation")
        
        while True:
            choice = input(Fore.YELLOW + "\nVotre choix (1 ou 2): " + Fore.WHITE)
            if choice in ['1', '2']:
                return choice == '1'  # True pour Max, False pour Min
            print(Fore.RED + "‚ùå Choix invalide.")


class ImprovedSimplexInput:
    """Classe am√©lior√©e pour la saisie des donn√©es du simplexe"""
    
    def __init__(self):
        self.interface = SimplexInterface()
        
    def get_problem_dimensions(self) -> Tuple[int, int]:
        """Obtient les dimensions du probl√®me avec validation am√©lior√©e"""
        print(Fore.CYAN + "\nüìê DIMENSIONS DU PROBL√àME")
        print(Fore.CYAN + "‚îÅ" * 40)
        
        # Nombre de variables
        while True:
            try:
                n_vars = input(Fore.GREEN + "\nüìä Nombre de variables de d√©cision: " + Fore.WHITE)
                n_vars = int(n_vars)
                if n_vars <= 0:
                    print(Fore.RED + "‚ùå Le nombre doit √™tre positif.")
                    continue
                break
            except ValueError:
                print(Fore.RED + "‚ùå Veuillez entrer un nombre entier.")
        
        # Nombre de contraintes
        while True:
            try:
                n_constraints = input(Fore.GREEN + "\nüîó Nombre de contraintes: " + Fore.WHITE)
                n_constraints = int(n_constraints)
                if n_constraints <= 0:
                    print(Fore.RED + "‚ùå Le nombre doit √™tre positif.")
                    continue
                break
            except ValueError:
                print(Fore.RED + "‚ùå Veuillez entrer un nombre entier.")
        
        print(Fore.YELLOW + f"\n‚úÖ Probl√®me de dimension {n_vars}x{n_constraints} cr√©√©!")
        return n_vars, n_constraints
    
    def get_objective_function(self, n_vars: int, is_max: bool) -> List[float]:
        """Saisie de la fonction objectif avec aide visuelle"""
        obj_type = "MAXIMISATION" if is_max else "MINIMISATION"
        print(Fore.CYAN + f"\nüéØ FONCTION OBJECTIF ({obj_type})")
        print(Fore.CYAN + "‚îÅ" * 50)
        
        # Affichage de la forme g√©n√©rale
        var_names = [f"x{chr(0x2081+i)}" for i in range(n_vars)]
        formula = " + ".join([f"c{chr(0x2081+i)}{var_names[i]}" for i in range(n_vars)])
        print(Fore.WHITE + f"\nForme: {'Max' if is_max else 'Min'} Z = {formula}")
        print(Fore.YELLOW + "\nEntrez les coefficients:")
        
        coefficients = [0]  # Premier √©l√©ment pour Z
        
        for i in range(n_vars):
            while True:
                try:
                    prompt = f"{Fore.GREEN}  c{chr(0x2081+i)} = {Fore.WHITE}"
                    coeff = float(input(prompt))
                    coefficients.append(coeff)
                    break
                except ValueError:
                    print(Fore.RED + "  ‚ùå Veuillez entrer un nombre valide.")
        
        # Afficher la fonction objectif compl√®te
        print(Fore.CYAN + "\n‚úÖ Fonction objectif:")
        actual_formula = " + ".join([f"{coefficients[i+1]}{var_names[i]}" 
                                    for i in range(n_vars)])
        print(Fore.WHITE + f"   {'Max' if is_max else 'Min'} Z = {actual_formula}")
        
        return coefficients
    
    def get_constraints(self, n_vars: int, n_constraints: int) -> Dict:
        """Saisie des contraintes avec interface am√©lior√©e"""
        print(Fore.CYAN + "\nüîó SAISIE DES CONTRAINTES")
        print(Fore.CYAN + "‚îÅ" * 50)
        
        equations = {}
        constraint_data = []
        var_names = [f"x{chr(0x2081+i)}" for i in range(n_vars)]
        
        for j in range(n_constraints):
            print(Fore.YELLOW + f"\nüìã Contrainte {j+1}:")
            
            # Afficher le format
            formula = " + ".join([f"a{chr(0x2081+i)}{chr(0x2081+j)}{var_names[i]}" 
                                 for i in range(n_vars)])
            print(Fore.WHITE + f"   {formula} ‚â§ b{chr(0x2081+j)}")
            
            key_eq = f"equation_{j+1}"
            equations[key_eq] = []
            
            # Saisir d'abord b (membre de droite)
            while True:
                try:
                    b_value = float(input(Fore.GREEN + f"   b{chr(0x2081+j)} = " + Fore.WHITE))
                    if b_value < 0:
                        print(Fore.YELLOW + "   ‚ö†Ô∏è  Valeur n√©gative d√©tect√©e. √ätes-vous s√ªr? (o/n): ", end="")
                        if input().lower() != 'o':
                            continue
                    equations[key_eq].append(b_value)
                    break
                except ValueError:
                    print(Fore.RED + "   ‚ùå Veuillez entrer un nombre valide.")
            
            # Saisir les coefficients
            coeffs = []
            print(Fore.YELLOW + "   Coefficients:")
            for i in range(n_vars):
                while True:
                    try:
                        coeff = float(input(Fore.GREEN + f"   a{chr(0x2081+i)}{chr(0x2081+j)} = " + Fore.WHITE))
                        coeffs.append(coeff)
                        equations[key_eq].append(coeff)
                        break
                    except ValueError:
                        print(Fore.RED + "   ‚ùå Veuillez entrer un nombre valide.")
            
            # Stocker pour l'affichage
            constraint_data.append([f"Contrainte {j+1}"] + coeffs + [b_value])
            
            # Afficher la contrainte compl√®te
            actual_formula = " + ".join([f"{coeffs[i]}{var_names[i]}" for i in range(n_vars)])
            print(Fore.CYAN + f"   ‚úÖ {actual_formula} ‚â§ {b_value}")
        
        return equations, constraint_data
    
    def display_problem_summary(self, variables: Dict, constraint_data: List):
        """Affiche un r√©sum√© du probl√®me saisi"""
        print(Fore.CYAN + "\n" + "="*70)
        print(Fore.CYAN + " "*20 + "üìä R√âSUM√â DU PROBL√àME")
        print(Fore.CYAN + "="*70)
        
        n_vars = variables["nombres_variables_base"]
        var_names = [f"x{chr(0x2081+i)}" for i in range(n_vars)]
        
        # Fonction objectif
        print(Fore.YELLOW + "\nüéØ Fonction Objectif:")
        obj_coeffs = variables["tab_optimisation"][1:]
        obj_formula = " + ".join([f"{obj_coeffs[i]}{var_names[i]}" for i in range(n_vars)])
        print(Fore.WHITE + f"   Max Z = {obj_formula}")
        
        # Contraintes sous forme de tableau
        print(Fore.YELLOW + "\nüîó Contraintes:")
        headers = [""] + var_names + ["‚â§", "b"]
        
        # Pr√©parer les donn√©es du tableau
        table_data = []
        for i, constraint_row in enumerate(constraint_data):
            row = [constraint_row[0]]  # Nom de la contrainte
            row.extend(constraint_row[1:-1])  # Coefficients
            row.append("‚â§")
            row.append(constraint_row[-1])  # Valeur b
            table_data.append(row)
        
        print(tabulate(table_data, headers=headers, tablefmt="fancy_grid", floatfmt=".2f"))
        
        # Conditions de non-n√©gativit√©
        print(Fore.YELLOW + "\nüìê Conditions de non-n√©gativit√©:")
        print(Fore.WHITE + f"   {', '.join(var_names)} ‚â• 0")
        
        input(Fore.GREEN + "\n‚úÖ Appuyez sur Entr√©e pour continuer...")


class ImprovedSimplexDisplay:
    """Classe pour l'affichage am√©lior√© des tableaux du simplexe"""
    
    @staticmethod
    def display_iteration_header(iteration: int):
        """Affiche l'en-t√™te d'une it√©ration"""
        if iteration == 0:
            print(Fore.BLUE + "\n" + "‚ïî" + "‚ïê"*60 + "‚ïó")
            print(Fore.BLUE + "‚ïë" + Fore.WHITE + " "*20 + "TABLEAU INITIAL" + " "*25 + Fore.BLUE + "‚ïë")
            print(Fore.BLUE + "‚ïö" + "‚ïê"*60 + "‚ïù")
        else:
            print(Fore.BLUE + "\n" + "‚ïî" + "‚ïê"*60 + "‚ïó")
            print(Fore.BLUE + "‚ïë" + Fore.WHITE + f" "*20 + f"IT√âRATION {iteration}" + " "*28 + Fore.BLUE + "‚ïë")
            print(Fore.BLUE + "‚ïö" + "‚ïê"*60 + "‚ïù")
    
    @staticmethod
    def display_tableau(variables: Dict, iteration: int = 0, pivot_info: Dict = None):
        """Affiche le tableau du simplexe avec mise en forme am√©lior√©e"""
        equations = variables["equations"]
        tab_optimisation = variables["tab_optimisation"]
        n_vars = variables["nombres_variables_base"]
        n_slack = variables["nb_equations"]
        
        # Headers
        headers = ["VB", "Cte"] + [f"x{i+1}" for i in range(n_vars)] + [f"s{i+1}" for i in range(n_slack)]
        
        # Pr√©parer les donn√©es
        rows = []
        
        # Ligne Z
        z_row = ["Z"] + tab_optimisation
        rows.append(z_row)
        
        # Lignes des contraintes
        for i, (key, eq) in enumerate(equations.items()):
            base_var = f"s{i+1}"  # Par d√©faut
            rows.append([base_var] + eq)
        
        # Colorier le pivot si disponible
        if pivot_info:
            pivot_row = pivot_info.get('row', -1)
            pivot_col = pivot_info.get('col', -1)
            
            if pivot_row >= 0 and pivot_col >= 0:
                # Marquer la cellule pivot
                rows[pivot_row + 1][pivot_col + 1] = (
                    Back.YELLOW + Fore.BLACK + 
                    f"{rows[pivot_row + 1][pivot_col + 1]:.3f}" + 
                    Style.RESET_ALL
                )
        
        print("\n" + tabulate(rows, headers=headers, tablefmt="grid", floatfmt=".3f"))
    
    @staticmethod
    def display_pivot_selection(entering_var: str, leaving_var: str, pivot_value: float):
        """Affiche les informations de s√©lection du pivot"""
        print(Fore.YELLOW + "\nüéØ S√©lection du pivot:")
        print(Fore.GREEN + f"   ‚Üí Variable entrante: {Fore.WHITE}{entering_var}")
        print(Fore.RED + f"   ‚Üí Variable sortante: {Fore.WHITE}{leaving_var}")
        print(Fore.CYAN + f"   ‚Üí Valeur du pivot: {Fore.WHITE}{pivot_value:.3f}")
    
    @staticmethod
    def display_solution(variables: Dict, optimal_value: float):
        """Affiche la solution optimale de mani√®re claire"""
        print(Fore.GREEN + "\n" + "‚ïî" + "‚ïê"*60 + "‚ïó")
        print(Fore.GREEN + "‚ïë" + Fore.WHITE + " "*18 + "SOLUTION OPTIMALE" + " "*25 + Fore.GREEN + "‚ïë")
        print(Fore.GREEN + "‚ïö" + "‚ïê"*60 + "‚ïù")
        
        n_vars = variables["nombres_variables_base"]
        
        print(Fore.YELLOW + "\nüìä Valeur optimale de Z: " + Fore.WHITE + f"{optimal_value:.3f}")
        print(Fore.YELLOW + "\nüìà Variables de d√©cision:")
        
        # Extraire les valeurs des variables
        var_values = [0] * n_vars
        for j in range(1, n_vars + 1):
            ones_count = 0
            one_position = -1
            for i, eq in enumerate(variables["equations"].values()):
                if abs(eq[j] - 1.0) < 1e-10:
                    ones_count += 1
                    one_position = i
                elif abs(eq[j]) > 1e-10:
                    ones_count = 0
                    break
            
            if ones_count == 1:
                var_values[j-1] = list(variables["equations"].values())[one_position][0]
        
        for i in range(n_vars):
            print(f"   {Fore.CYAN}x{i+1} = {Fore.WHITE}{var_values[i]:.3f}")
        
        # Afficher les variables d'√©cart
        print(Fore.YELLOW + "\nüìâ Variables d'√©cart:")
        slack_values = []
        for i in range(variables["nb_equations"]):
            col_idx = n_vars + i + 1
            ones_count = 0
            one_position = -1
            for j, eq in enumerate(variables["equations"].values()):
                if col_idx < len(eq):
                    if abs(eq[col_idx] - 1.0) < 1e-10:
                        ones_count += 1
                        one_position = j
                    elif abs(eq[col_idx]) > 1e-10:
                        ones_count = 0
                        break
            
            if ones_count == 1:
                value = list(variables["equations"].values())[one_position][0]
            else:
                value = 0
            slack_values.append(value)
            print(f"   {Fore.CYAN}s{i+1} = {Fore.WHITE}{value:.3f}")
        
        print(Fore.GREEN + "\n‚ú® Optimisation termin√©e avec succ√®s!")


def main():
    """Fonction principale avec l'interface am√©lior√©e"""
    interface = SimplexInterface()
    input_handler = ImprovedSimplexInput()
    
    while True:
        interface.show_menu()
        choice = interface.get_menu_choice()
        
        if choice == 1:
            # Nouveau probl√®me
            is_max = interface.show_problem_type_menu()
            n_vars, n_constraints = input_handler.get_problem_dimensions()
            
            # Cr√©er la structure variables
            variables = {
                "nombres_variables_base": n_vars,
                "nb_equations": n_constraints
            }
            
            # Fonction objectif
            tab_optimisation = input_handler.get_objective_function(n_vars, is_max)
            variables["tab_optimisation"] = tab_optimisation
            
            # Contraintes
            equations, constraint_data = input_handler.get_constraints(n_vars, n_constraints)
            variables["equations"] = equations
            
            # Afficher le r√©sum√©
            input_handler.display_problem_summary(variables, constraint_data)
            
            # Lancer la r√©solution
            print(Fore.CYAN + "\nüöÄ Lancement de la m√©thode du simplexe...")
            time.sleep(1)
            
            # Ici, vous pouvez int√©grer votre classe SimplexMethodTab
            # simplex = SimplexMethodTab(variables)
            # simplex.run()
            
            input(Fore.YELLOW + "\nüìå Appuyez sur Entr√©e pour retourner au menu...")
            
        elif choice == 2:
            # Charger un exemple
            print(Fore.CYAN + "\nüìä EXEMPLES DISPONIBLES:")
            print(Fore.WHITE + "1. Probl√®me de production (2 variables, 3 contraintes)")
            print(Fore.WHITE + "2. Probl√®me de transport (3 variables, 4 contraintes)")
            print(Fore.WHITE + "3. Probl√®me d'allocation (4 variables, 5 contraintes)")
            
            example_choice = input(Fore.YELLOW + "\nChoisir un exemple (1-3): " + Fore.WHITE)
            
            if example_choice == "1":
                # Exemple du cours
                variables = {
                    "tab_optimisation": [0, 3, 5],
                    "nombres_variables_base": 2,
                    "equations": {
                        "equation_1": [4, 1, 0],
                        "equation_2": [12, 0, 2],
                        "equation_3": [18, 3, 2]
                    },
                    "nb_equations": 3
                }
                print(Fore.GREEN + "\n‚úÖ Exemple charg√©: Probl√®me de production")
                input(Fore.YELLOW + "\nAppuyez sur Entr√©e pour continuer...")
                
        elif choice == 3:
            # Aide
            interface.clear_screen()
            print(Fore.CYAN + "üìö AIDE ET TUTORIEL")
            print(Fore.CYAN + "="*60)
            print(Fore.WHITE + """
La m√©thode du simplexe est un algorithme pour r√©soudre des probl√®mes
de programmation lin√©aire. Voici les √©tapes:

1. FORMULATION: D√©finir la fonction objectif et les contraintes
2. TABLEAU INITIAL: Convertir en forme standard avec variables d'√©cart
3. IT√âRATIONS: Am√©liorer la solution √† chaque √©tape
4. SOLUTION: Obtenir la valeur optimale

CONSEILS:
‚Ä¢ Assurez-vous que toutes les contraintes sont de type ‚â§
‚Ä¢ Les valeurs b doivent √™tre positives
‚Ä¢ V√©rifiez la coh√©rence de vos donn√©es
            """)
            input(Fore.YELLOW + "\nAppuyez sur Entr√©e pour continuer...")
            
        elif choice == 4:
            # Quitter
            print(Fore.CYAN + "\nüëã Merci d'avoir utilis√© le solveur Simplexe!")
            print(Fore.YELLOW + "√Ä bient√¥t! üéØ\n")
            break


if __name__ == "__main__":
    main()